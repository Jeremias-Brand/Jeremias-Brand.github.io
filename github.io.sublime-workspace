{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pa",
				"path\tmodule"
			],
			[
				"nu",
				"numpy\tmodule"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.soap.snake",
			"settings":
			{
				"buffer_size": 16408,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# collection of code snippets used for the prallel blast from agalma\n\n@pipe.stage\ndef prepare_blast(blast_dir, fasta, seq_type, genesets):\n    \"\"\"Prepare all-by-all BLAST database and command list\"\"\"\n\n    db = os.path.join(blast_dir, \"db\")\n\n    if genesets:\n        if seq_type == \"aa\":\n            program = \"blastp\"\n        else:\n            program = \"blastx\"\n        for geneset in genesets:\n            utils.cat_to_file(geneset, db+\".fa\")\n            # Also add genesets to the query file, to find overlapping genes\n            # between sets.\n            utils.cat_to_file(geneset, fasta)\n        wrappers.MakeBlastDB(db+\".fa\", db, \"prot\")\n    else:\n        if seq_type == \"aa\":\n            dbtype = \"prot\"\n            program = \"blastp\"\n        elif seq_type == \"nt\" or seq_type == \"cds\":\n            dbtype = \"nucl\"\n            program = \"tblastx\"\n        else:\n            utils.die(\"unrecognized sequence type:\", seq_type)\n        wrappers.MakeBlastDB(fasta, db, dbtype)\n\n    command = program + \" -db db -evalue 1e-20\" \\\n                      + \" -outfmt \\\"6 qseqid sseqid bitscore qlen length\\\"\"\n#\n#   blastp -db db -evalue 1e-20 -outfmt '6 qseqid sseqid bitscore qlen length'\n#\n    commands = workflows.blast.split_query(fasta, command, 100000, blast_dir)\n\n    ingest(\"commands\")\n\n# with aa as input t\n\ndef split_query(fasta, command, chunk_size=10000, workdir=''):\n    \"\"\"\n    Break a query file into chunks of roughly `chunk_size` nucleotides\n    and return a path to a text file with `command` applied to each\n    query fragment.\n    \"\"\"\n\n    workdir = os.path.abspath(workdir)\n    utils.safe_mkdir(workdir)\n\n    commands = os.path.join(workdir, 'commands.sh')\n    chunk_id = 0\n    chunk_file = None\n\n    nbases = 0\n\n    with open(commands, 'w') as f:\n        for record in SeqIO.parse(open(fasta), 'fasta'):\n            nbases += len(record.seq)\n            if nbases > (chunk_id * chunk_size):\n                chunk_id = nbases / chunk_size + 1\n                chunk_file = open(\n                                os.path.join(workdir, '%d.fa' % chunk_id),\n                                'w')\n                print >>f, command, '-query', '%d.fa' % chunk_id\n            SeqIO.write(record, chunk_file, 'fasta')\n\n    return commands\n\n\n@pipe.stage\ndef run_blast(blast_dir, commands):\n    \"\"\"Run all-by-all BLAST\"\"\"\n    blast_hits = os.path.join(blast_dir, \"hits.tab\")\n    wrappers.Parallel(\n        commands, \"--joblog blast.log --resume-failed --halt 1\",\n        stdout=blast_hits, cwd=blast_dir)\n    ingest(\"blast_hits\")\n\n\nclass Parallel (BaseWrapper):\n    \"\"\"\n    GNU parallel utility\n    http://www.gnu.org/software/parallel/\n    \"\"\"\n\n    def __init__(self, commands, *args, **kwargs):\n        self.init('parallel', **kwargs)\n        self.version('--version')\n        self.args += ('--gnu', '-a', commands)\n        if 'threads' in kwargs:\n            self.args += ('-j', kwargs['threads'])\n        hostlist = config.get_resource_default('hostlist', None)\n        if hostlist:\n            self.args += ('-S', hostlist)\n            if self.cwd:\n                self.args += ('--wd', self.cwd)\n            else:\n                self.args += ('--wd', os.getcwd())\n        self.args += args\n        self.run()\n",
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/parallel_blast_snippets.py",
			"file_size": 1004,
			"file_write_time": 131451346611880979,
			"settings":
			{
				"buffer_size": 3225,
				"line_ending": "Unix",
				"name": "# collection of code snippets used for the prallel"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/macpipe.matrix.tree.snake",
			"settings":
			{
				"buffer_size": 5062,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "fastq-mcf -o >(gzip -c >ERR138445_1.mcf.fastq.gz) -o >(gzip -c >ERR138445_2.mcf.fastq.gz) -l 50 -q 20 --qual-mean 20 -R adapters.fa \\\n ERR138445_1.fastq.gz ERR138445_2.fastq.gz &>ERR138445.mcf.err\n\n\nfastq-mcf -o >(gzip -c >ERR138446_1.mcf.fastq.gz) -o >(gzip -c >ERR138446_2.mcf.fastq.gz) -l 50 -q 20 --qual-mean 20 -R adapters.fa \\\n  ERR138446_1.fastq.gz ERR138446_2.fastq.gz &>ERR138446.mcf.err",
			"settings":
			{
				"buffer_size": 396,
				"line_ending": "Unix",
				"name": "fastq-mcf -o >(gzip -c >ERR138445_1.mcf.fastq.gz)"
			}
		},
		{
			"contents": "#!/bin/bash          \n#SBATCH --job-name=all_by_all \n#SBATCH --time=7-0:00:00\n#SBATCH --qos=1week\n#SBATCH --ntasks=30\n#SBATCH --cpus-per-task=1\n#SBATCH --mem-per-cpu=1G\n\nmodule purge\nmodule load parallel/20160122\nmodule load BLAST+/2.6.0\n\nsrun=\"srun -n1 -N1 --exclusive\"\n\nparallel=\"parallel -N 1 --delay .2 -j $SLURM_NTASKS --joblog parallel_joblog --resume\"\n\n    \n$parallel \"$srun ./blast_cluster.sh {1}\" ::: {1..6629}\n",
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/Scripts/Python/All_by_All_submit.sh",
			"file_size": 1528,
			"file_write_time": 131497905300000000,
			"settings":
			{
				"buffer_size": 420,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/tutorials/part3_homology_orthology.md",
			"settings":
			{
				"buffer_size": 10447,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/write_ortholog_fasta_files.py",
			"settings":
			{
				"buffer_size": 1554,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/parallel_aln_2.py",
			"settings":
			{
				"buffer_size": 12495,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/parallel_raxml.py",
			"settings":
			{
				"buffer_size": 5378,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Hi Ronald,\n\nI'm a PhD Sudent visiting UI for four month. I will arrive in early November and leave mid to late March.\nWould love to rent an apartment during that time but I would also be interested in sharing an apartment.\nWould it be possible to rent your room short term like that? I might be able to bump up the rent a little bit in exchange for the trouble.\n\nWould be great to hear from you,\n\nJeremias ",
			"settings":
			{
				"buffer_size": 406,
				"line_ending": "Unix",
				"name": "Hi Ronald,"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/jere_utils.py",
			"settings":
			{
				"buffer_size": 530,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/blast_to_mcl.py",
			"settings":
			{
				"buffer_size": 4784,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.snake",
			"settings":
			{
				"buffer_size": 19765,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Jul 22 17:51:22 2017\n\n@author: jeremias\n\"\"\"\nimport os,sys\nimport subprocess\nfrom seq import read_fasta_file\n\nimport sys,os\nfrom seq import read_fasta_file\n\ndef phyutility(DIR,alignment,min_col_occup,seqtype,min_chr=10):\n    \"\"\"\n    remove columns with occupancy lower than MIN_COLUMN_OCCUPANCY\n    remove seqs shorter than MIN_CHR after filter columns\n    \"\"\"\n    if DIR[-1] != \"/\": DIR += \"/\"\n    if os.path.exists(DIR+cleaned): return cleaned\n    assert alignment.endswith(\".aln\"),\\\n        \"phyutility infile \"+alignment+\" not ends with .aln\"\n    assert os.stat(DIR+alignment).st_size > 0, DIR+alignment+\"empty\"\n    assert seqtype == \"aa\" or seqtype == \"dna\",\"Input data type: dna or aa\"\n\n    if seqtype == \"aa\":\n        cmd = [\"phyutility\",\"-aa\",\"-clean\",str(min_col_occup),\"-in\",\\\n               DIR+alignment,\"-out\",DIR+alignment+\".pht\"]\n    else:\n        cmd = [\"phyutility\",\"-clean\",str(min_col_occup),\"-in\",\\\n               DIR+alignment,\"-out\",DIR+alignment+\".pht\"]\n    print \" \".join(cmd)\n    return \" \".join(cmd)\n\n\n\n\n\ndef mafft(DIR,fasta,thread,seqtype):\n    if DIR[-1] != \"/\": DIR += \"/\"\n    alignment = fasta+\".mafft.aln\"\n    if os.path.exists(DIR+alignment) and os.stat(DIR+alignment).st_size>0:\n        return alignment\n    assert seqtype == \"aa\" or seqtype == \"dna\",\"Input data type: dna or aa\"\n    seqlist = read_fasta_file(DIR+fasta)\n    seqcount = len(seqlist)\n    maxlen = 0\n    for s in seqlist:\n        maxlen = max(maxlen,len(s.seq))\n    assert seqcount >= 4, \"less than 4 sequences in \"+DIR+fasta\n\n    if seqtype == \"dna\":\n        infasta = DIR+fasta\n        seq = \"--nuc\"\n    else:\n        infasta = DIR+fasta+\".temp\"\n        seq = \"--amino\"\n        with open(infasta,\"w\") as outfile:\n            for s in seqlist:\n                #remove U which is usually not in aa alphabet\n                s.seq = s.seq.replace(\"U\",\"X\")\n                s.seq = s.seq.replace(\"u\",\"x\")\n                #remove stop codon and seq after it\n                if \"*\" in s.seq:\n                    s.seq = s.seq[:s.seq.find(\"*\")]\n                outfile.write(s.get_fasta())\n\n    if seqcount >= 1000 or maxlen >= 10000:\n        alg = [\"--auto\"] #so that the run actually finishes!\n    else: alg = [\"--genafpair\",\"--maxiterate\",\"1000\"]\n\n    cmd = [\"mafft\"]+alg+[seq,\"--thread\",str(thread)]\n    #com += [\"--anysymbol\"] # when there are \"U\"s in aa sequences\n    cmd += [infasta, \">\", alignment]\n    return \" \".join(cmd)\n#    out = open(DIR+alignment, 'w')\n#    p = subprocess.Popen(cmd,stderr=subprocess.PIPE,stdout=out)\n#    out.close()\n#    p.communicate()\n#    assert p.returncode == 0,\"Error mafft\"\n#    if seqtype == \"aa\": os.remove(DIR+fasta+\".temp\")\n#    return alignment\n\n\n\ndef pasta(DIR,fasta,thread,seqtype):\n    if DIR[-1] != \"/\": DIR += \"/\"\n    if DIR == \"./\": DIR = \"\"\n    aln = DIR+fasta+\".pasta.aln\"\n    temp_aln = DIR+\"pastajob.marker001.\"+fasta+\".temp.aln\"\n    fa = DIR+fasta\n    if os.path.exists(aln): return fasta+\".pasta.aln\"\n    if not os.path.exists(temp_aln):\n        assert seqtype == \"aa\" or seqtype == \"dna\",\"Input data type: dna or aa\"\n        seq = \"Protein\" if seqtype == \"aa\" else \"DNA\"\n\n        # pasta does not recognize \"*\" or \"U\"\n        seqcount = 0 #record how many sequences in the fasta file\n        infile = open(fa,\"r\")\n        outfile = open(fa+\".temp\",\"w\")\n        for line in infile:\n            if len(line.strip()) == 0: continue # skip empty lines\n            if line[0] == \">\":\n                seqcount += 1\n                outfile.write(line)\n            else:\n                if seqtype == \"aa\":\n                    #remove U which is usually not in aa alphabet\n                    line = (line.replace(\"U\",\"X\")).replace(\"u\",\"x\")\n                    #remove stop codon and seq after it\n                    if \"*\" in line:\n                        line = line[:line.find(\"*\")]\n                    if line[-1] != \"\\n\": line += \"\\n\"\n                outfile.write(line)\n        infile.close()\n        outfile.close()\n\n        cmd = [\"run_pasta.py\",\"--input=\"+fa+\".temp\",\"--datatype=\"+seq]\n        return \" \".join(cmd)\n#        p = subprocess.Popen(cmd)\n#        err,out = p.communicate()\n#        print err,out\n#        assert p.returncode == 0 and os.path.exists(temp_aln),\"Error pasta\"\n#\n#    #remove intermediate files\n#    os.remove(fa+\".temp\")\n#    os.rename(temp_aln,aln)\n#    os.system(\"rm \"+DIR+\"pastajob*\")\n#    return fasta+\".pasta.aln\"\n\ndef get_fasta_size(fasta):\n    \"\"\"\n    given a fasta file\n    output the number of seqs and the length of the longest seq\n    \"\"\"\n    longest = 0\n    seqlist = read_fasta_file(fasta)\n    for s in seqlist:\n        longest = max(longest,len(s.seq.replace(\"-\",\"\")))\n    return len(seqlist),longest\n\n\ndef print_aln_cmd(DIR,fasta,num_cores,seqtype,num_seq_cutoff=1000):\n    \"\"\"\n    given a fasta file\n\n    align, trim alignment and build a tree\n    choose appropriate tools depending on size of the fasta file\n    \"\"\"\n    if DIR[-1] != \"/\": DIR += \"/\"\n    seqcount, maxlen = get_fasta_size(DIR+fasta)\n    num_seq_cutoff = int(num_seq_cutoff)\n    assert seqcount >= 4, \"Less than four sequences in \"+DIR+fasta\n    print(fasta,seqcount,\"sequences\")\n    if seqcount >= num_seq_cutoff: # large cluster\n        cmd = pasta(DIR,fasta,num_cores,seqtype)\n    else: # small cluster\n        cmd = mafft(DIR,fasta,num_cores,seqtype)\n    return cmd\n\n\ndef main(DIR,num_cores,seqtype):\n    \"\"\"if test, only process clusterID that ends with 0\"\"\"\n    assert seqtype == \"aa\" or seqtype == \"dna\",\\\n        \"Input data type: dna or aa\"\n    if DIR[-1] != \"/\": DIR += \"/\"\n\n    #check for really long sequences or large alignments.\n    #These crashes the alignment program\n    for i in os.listdir(DIR):\n        if i.endswith(\".fa\"):\n            seqcount,maxlen = get_fasta_size(DIR+i)\n            if (maxlen>=10000 and seqtype==\"aa\") or (maxlen>=30000 and seqtype==\"dna\"):\n                print(i,\"has\",seqcount,\"sequences\")\n                print(\"longest sequence has\",maxlen,\"characters\")\n                print(\"Warning: sequence too long. May crash alignment process\")\n                #sys.exit()\n    with open(\"aln_cmd.sh\", \"w\") as alnf:\n        filecount = 0\n        for i in os.listdir(DIR):\n            if not i.endswith(\".fa\"): continue\n            filecount += 1\n            print(print_aln_cmd(DIR=DIR,fasta=i,num_cores=num_cores,seqtype=seqtype,num_seq_cutoff=1000),file=alnf)\n        assert filecount > 0, \"No file end with .fa found in \"+DIR\n\n    #run all the alignments using parallel each alignment only gets one core\n    #also pasta and mafft calls are mixed\n    cmd = [\"parallel\", \"-a\", \"aln_cmd.sh\", \"-j\", num_cores, \"--joblog\", \"align.log\"]\n    print( \" \".join(cmd))\n    subprocess.call(cmd, shell=False)\n\n    # after running this we need to rename the pasta files and clean up\n    cmd = [\"rename\", \"\\'s/.+.marker001.(.+).aln/$1.pasta.aln/\\'\"]\n    subprocess.call(cmd, shell=False)\n    cmd = [\"rm\", \"pastajob*\", \"*.temp\"]\n    subprocess.call(cmd, shell=False)\n\n    # Trimming the alignment with phyutility\n    with open(\"pht_cmd.sh\", \"w\") as phyf:\n        filecount = 0\n        for i in os.listdir(DIR):\n            if i.endswith(\"mafft.aln\"):\n                filecount += 1\n                phyutility(DIR,i,0.1,seqtype)\n            elif: i.endwith(\"pasta.aln\"):\n                filecount += 1\n                phyutility(DIR,i,0.01,seqtype)\n        assert filecount > 0, \"No file end with .aln found in \"+DIR\n    assert os.path.exists(DIR+alignment+\"-pht\"),\"Error phyutility\"\n    # run the commands\n    cmd = [\"parallel\", \"-a\", \"pht_cmd.sh\", \"-j\", num_cores, \"--joblog\", \"pht.log\"]\n    print( \" \".join(cmd))\n    subprocess.call(cmd, shell=False)\n\n    #remove empty and very short seqs\n    for i in os.listdir(DIR):\n        if i.endswith(\".pht\"):\n            with open(DIR+i+\"cln\", \"w\") as f:\n                for s in read_fasta_file(DIR+i, \"w\"):\n                    if len(s.seq.replace(\"-\",\"\")) >= min_chr:\n                        f.write(s.get_fasta())\n            os.remove(DIR+i)\n\n\n#when we have amino acids we need to remove stop codons and\n#replace U (selenocystein) with X (which does not exist in the alphabet)\n# this results in a temp file we should remove at the end\n\n\n\n#for i in os.listdir(DIR):\n#        if i.endswith(\".fa\"):\n#            seqcount,maxlen = get_fasta_size(DIR+i)\n#            if (maxlen>=10000 and seqtype==\"aa\") or (maxlen>=30000 and seqtype==\"dna\"):\n#                print i,\"has\",seqcount,\"sequences\"\n#                print \"longest sequence has\",maxlen,\"characters\"\n#                print \"Warning: sequence too long. May crash alignment process\"\n#                #sys.exit()\n#\n#    filecount = 0\n#    for i in os.listdir(DIR):\n#        if not i.endswith(\".fa\"): continue\n#        if test and (i.split(\".\")[0])[-1] != \"0\": continue\n#        filecount += 1\n#        if bs == \"n\":\n#            fasta_to_tree(DIR=DIR,fasta=i,num_cores=num_cores,seqtype=seqtype)\n#        else: fasta_to_bs_tree(DIR=DIR,fasta=i,num_cores=num_cores,seqtype=seqtype)\n#    assert filecount > 0, \"No file end with .fa found in \"+DIR\n",
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/parallel_aln_test.py",
			"file_size": 9069,
			"file_write_time": 131453974421732672,
			"settings":
			{
				"buffer_size": 9069,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/biolite/biolite/wrappers.py",
			"settings":
			{
				"buffer_size": 32389,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/biolite/biolite/workflows/blast.py",
			"settings":
			{
				"buffer_size": 6045,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/agalma/agalma/homologize.py",
			"settings":
			{
				"buffer_size": 8862,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/agalma/dev/mito-validate/mitoMetazoan90_pro/commands.sh",
			"settings":
			{
				"buffer_size": 1836,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/split_db.py",
			"settings":
			{
				"buffer_size": 4476,
				"line_ending": "Unix",
				"name": "#!/bin/bash"
			}
		},
		{
			"contents": "bowtie2 --very-sensitive-local --phred33 -q -x /home/jeremias/dbs/rRNA/SILVA_128_LSURef_tax_silva.fasta -1 /home/jeremias/dev/macpipe_trans/data/Macmini2_R1_cor_trim.fq.gz  -2 /home/jeremias/dev/macpipe_trans/data/Macmini2_R2_cor_trim.fq.gz --threads 14 --met-file bowtie_stats --al-conc-gz /home/jeremias/dev/macpipe_trans/data/Macmini2_rRNA.gz --un-conc-gz /home/jeremias/dev/macpipe_trans/data/Macmini2_clean.gz &> logs/bowtie &&         ' returned non-zero exit status 2\n  File \"/home/jeremias/dev/macpipe_trans/macpipe.trans.snake\", line 147, in __rule_remove_rRNA\n  File \"/home/jeremias/.linuxbrew/var/pyenv/versions/3.5.2/lib/python3.5/concurrent/futures/thread.py\", line 55, in run\n",
			"settings":
			{
				"buffer_size": 690,
				"line_ending": "Unix",
				"name": "bowtie2 --very-sensitive-local --phred33 -q -x /ho"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "an",
		"selected_items":
		[
			[
				"an",
				"Anaconda: Disable linting on this file"
			],
			[
				"synta py",
				"Set Syntax: Python"
			],
			[
				"lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"lint",
				"Anaconda: Disable linting on this file"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"ana lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"wo",
				"Word Wrap: Toggle"
			],
			[
				":w",
				":w - Save"
			],
			[
				"disab",
				"Anaconda: Disable linting on this file"
			],
			[
				"set synta py",
				"Set Syntax: Python"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				" toggle li",
				"SublimeLinter: Toggle Linter"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"synta C",
				"Set Syntax: C++"
			],
			[
				"syn",
				"Set Syntax: R"
			],
			[
				"synt C",
				"Set Syntax: C++"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				":W",
				":w - Save"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"syntax MARK",
				"Set Syntax: Markdown"
			],
			[
				"menu",
				"View: Toggle Menu"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"sublime-executable_path()",
			"sublime-executable._path()",
			"sublime-executable.pat",
			"cmd",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/Reports/P521/blob/Mspi_blobplot_summary.csv",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/biolite/biolite/workflows/transcriptome.py",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/software/phylogenomic_dataset_construction/tutorials/part3_homology_orthology.md",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/software/phylogenomic_dataset_construction/tutorials/part2_seq_processing.md",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/software/phylogenomic_dataset_construction/tutorials/part1_dependencies.md",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/software/phylogenomic_dataset_construction/tutorials/readme.md",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/software/phylogenomic_dataset_construction/blast_to_mcl.py",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/Reports/2017-07-14-cluster/RAxML_start_tree.txt",
		"/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.busco.snake",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/morphometry.md",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/index.html",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_config.yml",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/aboutme.md",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/em.md",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/phy.md",
		"/D/Bibliothek/Dokumente/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_posts/2017-06-21-what-can-we-learn-from-tiny-worms.md",
		"/media/Shared/Dropbox/Documents/Notebooks/techniques/github.io.txt",
		"/home/jeremias/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/jeremias/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/img/MTP_2713_sv_stylet_crop.png",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/em.md",
		"/media/Shared/Dropbox/Media/Egypt_2015/Egypt15_images_video/GOPR0331.JPG",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/img/Macrostomum_diversity_V2.png",
		"/media/Shared/Dropbox/Bioinformatics/dev/pull_seq_from_transcriptome/fish_genes.py",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.stamp.small.snake",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.main.small.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/phy.md",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.timestamp.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_config.yml",
		"/media/Shared/Dropbox/Bioinformatics/Scripts/Python/hackerrank/30_day_of_code/11-hourglass.py",
		"/media/Shared/Dropbox/Mendeley/unread/~$Uyeda_et _al_2015.pdf",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.small.snake_from_server170601",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.small.snake",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/config.macpipe.trans.small.yaml",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/data/trinity.conf.snake",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.small_170601.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_static/morphometry.md",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/page.html",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/css/main.css",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/base-cv.html",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/css/CV.css",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/CV.md",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/CV.html.bku",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/CV.html",
		"/run/user/1000/gvfs/sftp:host=131.152.125.111/home/jeremias/dev/macpipe_trans/macpipe.trans.stamp.small.snake",
		"/run/user/1000/gvfs/sftp:host=131.152.125.111/home/jeremias/dev/macpipe_trans/config.macpipe.trans.small.yaml",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/data/Mcla",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/data/Mcla.readdata.txt",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/dev-testfile",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.stamp.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_posts/2015-01-04-first-post.md",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_posts/2015-01-15-pirates.md",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/delim/spdead.bpp.txt",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/275 documents from Macrostomidae.fasta",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/dd.fasta",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/commands.txt",
		"/media/Shared/Dropbox/Bioinformatics/Scripts/Python/hackerrank/30_day_of_code/05-strings.py",
		"/media/Shared/Dropbox/Bioinformatics/Scripts/dotfiles/alcedo-2017-05-29/.vimrc",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/minimal.html",
		"/media/Shared/Dropbox/Bioinformatics/GIT/somefile2.py",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/ChenLi2001.bpp.ctl",
		"/home/jeremias/soft/bpp3.3a/examples/ChenLi2001.Imap.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/yu2001.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/functions.hpp",
		"/home/jeremias/soft/BEASTv1.8.4/README.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/yu2001.bpp.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/CMakeLists.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/STARBEAST/phryno_bpp.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/STARBEAST/methods.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/playground.cpp",
		"/home/jeremias/soft/bpp3.3a/src/README.txt",
		"/home/jeremias/soft/bpp3.3a/examples/ChenLi2001.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/brown.GTRG.out",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/brown.GTRG_adeq.out",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/MCbase.dat",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/lysozyme/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/baseml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/M8.1/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/M8/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/lysozyme/lysozymeLarge_col_hom.trees",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Brain_Moore.txt",
		"/home/jeremias/Desktop/HIV_renamed.fasta",
		"/home/jeremias/Notebooks/Techniques/R_plotting.txt",
		"/home/jeremias/Desktop/HIV_dentist_renamed.fasta",
		"/home/jeremias/Desktop/sequence.fasta",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/HIV_dentist/HIV_dentist.fasta",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/HIV_dentist/HIV_align",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/mrbayes/1-Exercise/conifer_dna.nex",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Jeff_Thorne.txt",
		"/home/jeremias/Desktop/cisco.log",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Steve_Smith.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau/Branch_and_Bound.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau/Distance_Methods.txt",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/FEC00001_1.seq",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/LatLon.txt",
		"/home/jeremias/Dropbox/Bioinformatics/Scripts/Python/transect_timer_batch10.py",
		"/home/jeremias/Dropbox/Bioinformatics/Scripts/Python/python_scripting_comands.md",
		"/home/jeremias/Dropbox/Documents/Courses/Programming_life_science/Git-Workshop/SIB-Days-2016/examples/git-init.sh",
		"/home/jeremias/Documents/Python/Shell_test.py",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/Ch3observations.txt",
		"/home/jeremias/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes.md",
		"/home/jeremias/bioinformatics/fasta_header_renamer._joiner.sh",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/Codebook for Transcriptome assembly.markdown",
		"/home/jeremias/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/# Codebook for Transcriptome assembly #",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/commands.txt",
		"/home/jeremias/Documents/Genomic16/lectures/lab/ggplot2 excercise",
		"/home/jeremias/Documents/install_essentials.sh",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/84_3.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi_whole_1.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi.fasta",
		"/home/jeremias/Downloads/vpnsetup64.sh",
		"/home/jeremias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/jeremias/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/84_1.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi_whole_1.dnd"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"BSSE_2015_12_",
			"min_chr",
			"read_fa",
			"set_up_cores",
			"paral",
			"Macrostomum",
			"E309",
			"???",
			"NNN+",
			"\\?+",
			"\\?",
			"\\?+",
			"?",
			"??",
			"FLPC20",
			"FLPC",
			"FLPC20",
			"FLCPC20",
			"^>.*viral sample (.+), V3 region",
			"^>.*viral sample(.+), V3 region",
			"BSSE_QGF_[0-9]{5}_[A-Z0-9]{9}_[0-9]*_(Mac[0-9a-zA-Z]{3}_[0-9]{4})_.+_.+_.+_.+_(R[0-9])_.+_.+_.+.fastq.gz",
			"\nBSSE_QGF_[0-9]{5}_[A-Z0-9]{9}_[0-9]*_(Mac[0-9a-zA-Z]{3}_[0-9]{4})_.+_.+_.+_.+_(R[0-9])_.+_.+_.+.fastq.gz",
			"b",
			"^(>.+)\\ (comp.+)$",
			"^(>)(.+)$",
			"^>",
			"^\\>",
			"^(>)(.+)$",
			"^\\>",
			"^Laumer_([A-Za-z_]+)_trinity.fasta$",
			"^Laumer_([A-Za-z_]+)trinity.fasta$",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:(\\d+)\\t([^\\t]+)\\t+([^\\t]+)[^\\n]*",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:(\\d+)\\t([^\\t]+)\\t+([^\\t]+).*",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:",
			"([^\\t]+)\\t(\\w{3})",
			"([^\\t]+)\\t ",
			"\\ ",
			"([^\\t\\ \\n]+)[\\t\\ ]",
			"([^\\t\\ ]+)[\\t\\ ]",
			"([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)",
			"([^\\t\\n]+)",
			"([^\\t]+)",
			"([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)",
			"(\\d+ \\d+'\\d+\\.\\d+\\\")[NE]",
			"(\\d+ \\d+'\\d+\\.\\d+\\\")[SW]",
			"(\\\"[NS])\\n",
			"(.+\\\"[NS])\\n",
			"(\\\"[NS])\\n",
			"(\\2\"[NS])\\n",
			"(\\2[NS])\\n",
			"([NS])\\n",
			"[NS]\\n",
			"'\\w",
			"'N",
			"'\\w",
			"\\w",
			"4",
			"\\w",
			"galma",
			"Cluster",
			"adaptors",
			">",
			"\t\t\t\t",
			">",
			"GATTTAAAAATTGCGCTGTTTTTTCCTTCTTTAACATTTTCATCAAACCATGCAGAATAGTGCCCCCTGC",
			"keys",
			"{ ",
			"option",
			"menu",
			"errksjelkrjeslkjfkldjsfkljsdlfkjkldsjafkldéj",
			">",
			"apt",
			"repository"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"*Macrostomum*",
			">\\1",
			"\\1",
			"\\1_\\2.fastq.gz",
			"\\1\\2.fastq.gz",
			"\\1_\\2",
			"\\1",
			"\\3\\t\\2.\\t\\1\\t\\4\\t\\5\\t\\6\\t\\7",
			"\\3\\t\\2.\\t\\1\\t\\4\\t\\5",
			"\\2.\\1",
			"x",
			"\\t",
			"x\\t",
			"\\1\\t\\2\\t",
			"x",
			"\\5\\6\\1\\2\\3\\4",
			"\\1",
			"-\\1",
			"\\1\\t",
			"'",
			"",
			".",
			"",
			".",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.soap.snake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16408,
						"regions":
						{
						},
						"selection":
						[
							[
								4040,
								4819
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1760.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/parallel_blast_snippets.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3225,
						"regions":
						{
						},
						"selection":
						[
							[
								2538,
								2538
							]
						],
						"settings":
						{
							"auto_name": "# collection of code snippets used for the prallel",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/macpipe.matrix.tree.snake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5062,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 396,
						"regions":
						{
						},
						"selection":
						[
							[
								396,
								199
							]
						],
						"settings":
						{
							"auto_name": "fastq-mcf -o >(gzip -c >ERR138445_1.mcf.fastq.gz)",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/Scripts/Python/All_by_All_submit.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 420,
						"regions":
						{
						},
						"selection":
						[
							[
								238,
								238
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/tutorials/part3_homology_orthology.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10447,
						"regions":
						{
						},
						"selection":
						[
							[
								7787,
								7775
							]
						],
						"settings":
						{
							"color_scheme": "Packages/MarkdownEditing/MarkdownEditor.tmTheme",
							"syntax": "Packages/MarkdownEditing/Markdown (Standard).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2046.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/write_ortholog_fasta_files.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1554,
						"regions":
						{
						},
						"selection":
						[
							[
								620,
								620
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/parallel_aln_2.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12495,
						"regions":
						{
						},
						"selection":
						[
							[
								10604,
								10604
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4205.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/parallel_raxml.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5378,
						"regions":
						{
						},
						"selection":
						[
							[
								1330,
								1330
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 406,
						"regions":
						{
						},
						"selection":
						[
							[
								406,
								0
							]
						],
						"settings":
						{
							"auto_name": "Hi Ronald,",
							"default_dir": "D:\\Bibliothek\\Dokumente\\Dropbox\\Documents\\CV-website\\Jeremias-Brand.github.io",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/scripts/jere_utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 530,
						"regions":
						{
						},
						"selection":
						[
							[
								530,
								530
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/phylogenomic_dataset_construction/blast_to_mcl.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4784,
						"regions":
						{
						},
						"selection":
						[
							[
								1191,
								1202
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.snake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19765,
						"regions":
						{
						},
						"selection":
						[
							[
								6040,
								6040
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2979.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/parallel_aln_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9069,
						"regions":
						{
						},
						"selection":
						[
							[
								6465,
								6465
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2693.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/biolite/biolite/wrappers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32389,
						"regions":
						{
						},
						"selection":
						[
							[
								7795,
								7795
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 13668.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "D:\\Bibliothek\\Dokumente\\Dropbox\\Documents\\CV-website\\Jeremias-Brand.github.io",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/biolite/biolite/workflows/blast.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6045,
						"regions":
						{
						},
						"selection":
						[
							[
								1487,
								1487
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/agalma/agalma/homologize.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8862,
						"regions":
						{
						},
						"selection":
						[
							[
								5086,
								5086
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1944.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/agalma/dev/mito-validate/mitoMetazoan90_pro/commands.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1836,
						"regions":
						{
						},
						"selection":
						[
							[
								1836,
								1836
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/D/Bibliothek/Dokumente/Dropbox/Bioinformatics/dev/macpipe_matrix/split_db.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4476,
						"regions":
						{
						},
						"selection":
						[
							[
								332,
								332
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"auto_name": "#!/bin/bash",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 20,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 690,
						"regions":
						{
						},
						"selection":
						[
							[
								414,
								0
							]
						],
						"settings":
						{
							"auto_name": "bowtie2 --very-sensitive-local --phred33 -q -x /ho",
							"default_dir": "D:\\Bibliothek\\Dokumente\\Dropbox\\Documents\\CV-website\\Jeremias-Brand.github.io",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 29.0
	},
	"pinned_build_system": "",
	"project": "github.io.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"draf/em",
				"drafts/em.md"
			],
			[
				"em.",
				"em.md"
			],
			[
				"",
				"~/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes_Computational_Biology.md"
			],
			[
				"comm",
				"~/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes_Computational_Biology.md"
			],
			[
				"ch",
				"examples/Ch3observations.txt"
			],
			[
				"lat",
				"examples/LatLon.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 186.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
